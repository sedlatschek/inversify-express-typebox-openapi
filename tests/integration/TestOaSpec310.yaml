openapi: 3.1.0
info:
  title: TestOa
  version: 0.2.0
  description: The expected OpenAPI 3.1.0 spec for the test controllers
  contact:
    email: developer@example.org
paths:
  /api/users/me:
    get:
      responses:
        "200":
          description: The user from the session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
      parameters:
        - name: sessionId
          in: cookie
          schema:
            type: string
          required: true
      security:
        - basicAuth:
            - user
        - bearerAuth:
            - user
        - basicAuth:
            - user
            - admin
        - bearerAuth:
            - user
            - admin
      operationId: UserController_getUserFromSession
      tags:
        - Users
  /api/users/:
    get:
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $id: User
                  type: object
                  properties:
                    id:
                      type: number
                    name:
                      type: string
                    email:
                      type: string
                    createdAt:
                      format: date-time
                      type: string
                    state:
                      $id: UserState
                      anyOf:
                        - const: active
                          type: string
                        - const: inactive
                          type: string
                        - const: pending
                          type: string
                  required:
                    - id
                    - name
                    - email
                    - createdAt
                    - state
      parameters:
        - name: Accept-Language
          in: header
          schema:
            type: string
          description: Falls back to english if not provided
          required: false
        - name: state
          in: query
          schema:
            $ref: "#/components/schemas/UserState"
          required: false
      operationId: UserController_getAllUsers
      tags:
        - Users
      security:
        - basicAuth:
            - user
            - admin
        - bearerAuth:
            - user
            - admin
    post:
      responses:
        "201":
          description: The created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      operationId: UserController_createUser
      tags:
        - Users
      security:
        - basicAuth:
            - user
            - admin
        - bearerAuth:
            - user
            - admin
  /api/users/active:
    get:
      responses:
        "200":
          description: List of all active users
          content:
            application/json:
              schema:
                type: array
                items:
                  $id: User
                  type: object
                  properties:
                    id:
                      type: number
                    name:
                      type: string
                    email:
                      type: string
                    createdAt:
                      format: date-time
                      type: string
                    state:
                      $id: UserState
                      anyOf:
                        - const: active
                          type: string
                        - const: inactive
                          type: string
                        - const: pending
                          type: string
                  required:
                    - id
                    - name
                    - email
                    - createdAt
                    - state
      deprecated: true
      operationId: UserController_getAllActiveUsers
      tags:
        - Users
      security:
        - basicAuth:
            - user
            - admin
        - bearerAuth:
            - user
            - admin
  /api/users/{userId}:
    get:
      responses:
        "200":
          description: The requested user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
      parameters:
        - name: Accept-Language
          in: header
          schema:
            type: string
          required: false
        - name: userId
          in: path
          schema:
            type: number
          required: true
      operationId: UserController_getUserById
      tags:
        - Users
      security:
        - basicAuth:
            - user
            - admin
        - bearerAuth:
            - user
            - admin
    put:
      responses:
        "200":
          description: The updated user
        "404":
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      parameters:
        - name: userId
          in: path
          schema:
            type: number
          required: true
      operationId: UserController_updateUser
      tags:
        - Users
      security:
        - basicAuth:
            - user
            - admin
        - bearerAuth:
            - user
            - admin
    delete:
      responses:
        "204":
          description: User deleted
        "404":
          description: User not found
      parameters:
        - name: userId
          in: path
          schema:
            type: number
          required: true
      operationId: UserController_deleteUser
      tags:
        - Users
      security:
        - basicAuth:
            - user
            - admin
        - bearerAuth:
            - user
            - admin
  /api/users/{userId}/state:
    patch:
      responses:
        "200":
          description: The updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserState"
      parameters:
        - name: userId
          in: path
          schema:
            type: number
          required: true
      operationId: UserController_patchUserState
      tags:
        - Users
      security:
        - basicAuth:
            - user
            - admin
        - bearerAuth:
            - user
            - admin
  /api/users/{userId}/posts:
    get:
      responses:
        "200":
          description: List of the users posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $id: Post
                  type: object
                  properties:
                    id:
                      type: number
                    userId:
                      type: number
                    title:
                      type: string
                    content:
                      type: string
                    createdAt:
                      format: date-time
                      type: string
                  required:
                    - id
                    - userId
                    - title
                    - content
                    - createdAt
      parameters:
        - name: Accept-Language
          in: header
          schema:
            type: string
          required: false
        - name: userId
          in: path
          schema:
            type: number
          required: true
      tags:
        - Posts
        - Users
      description: Get all posts of a user
      operationId: UserController_getUserPosts
      security:
        - basicAuth:
            - user
            - admin
        - bearerAuth:
            - user
            - admin
  /api/posts/:
    post:
      responses:
        "201":
          description: Post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      description: Create a new post
      operationId: TestOaController310Post_createPost
      tags:
        - Posts
      security:
        - bearerAuth:
            - user
            - poster
  /api/posts/{postId}:
    put:
      responses:
        "200":
          description: Post updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
      requestBody:
        description: The post dto
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      parameters:
        - name: postId
          in: path
          schema:
            type: number
          required: true
      description: Update a existing post
      operationId: TestOaController310Post_updatePost
      tags:
        - Posts
      security:
        - bearerAuth:
            - user
            - poster
    delete:
      responses:
        "200":
          description: Post deleted
        "404":
          description: Post not found
      parameters:
        - name: postId
          in: path
          schema:
            type: number
          description: The post id
          required: true
      operationId: TestOaController310Post_deletePost
      description: Delete a post
      tags:
        - Posts
      security:
        - bearerAuth:
            - user
            - poster
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        email:
          type: string
        createdAt:
          format: date-time
          type: string
        state:
          $id: UserState
          anyOf:
            - const: active
              type: string
            - const: inactive
              type: string
            - const: pending
              type: string
      required:
        - id
        - name
        - email
        - createdAt
        - state
      title: User
    UserState:
      anyOf:
        - const: active
          type: string
        - const: inactive
          type: string
        - const: pending
          type: string
      title: UserState
    Post:
      type: object
      properties:
        id:
          type: number
        userId:
          type: number
        title:
          type: string
        content:
          type: string
        createdAt:
          format: date-time
          type: string
      required:
        - id
        - userId
        - title
        - content
        - createdAt
      title: Post
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
tags: []
servers: []
